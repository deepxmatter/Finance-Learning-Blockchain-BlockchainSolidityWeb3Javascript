/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FundMe, FundMeInterface } from "../FundMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeedAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MINIMUM_USD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "addressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "funders",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "i_owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000fd238038062000fd28339818101604052810190610034919061011f565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ec826100c1565b9050919050565b6100fc816100e1565b811461010757600080fd5b50565b600081519050610119816100f3565b92915050565b600060208284031215610135576101346100bc565b5b60006101438482850161010a565b91505092915050565b610e76806200015c6000396000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a146100ff578063b60d42881461012a578063dba6335f14610134578063dc0d3dff1461015f57610083565b80633ccfd60b1461008d5780633e47d6f3146100975780636b69a592146100d457610083565b366100835761008161019c565b005b61008b61019c565b005b6100956102d6565b005b3480156100a357600080fd5b506100be60048036038101906100b991906107ae565b610518565b6040516100cb91906107f4565b60405180910390f35b3480156100e057600080fd5b506100e9610530565b6040516100f691906107f4565b60405180910390f35b34801561010b57600080fd5b5061011461053d565b604051610121919061086e565b60405180910390f35b61013261019c565b005b34801561014057600080fd5b50610149610563565b6040516101569190610898565b60405180910390f35b34801561016b57600080fd5b50610186600480360381019061018191906108df565b610589565b6040516101939190610898565b60405180910390f35b6802b5e3af16b18800006101db600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c890919063ffffffff16565b101561021c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021390610969565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461026a91906109b8565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035d576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104085760006001828154811061038357610382610a0e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040090610a3d565b915050610360565b50600067ffffffffffffffff81111561042457610423610a86565b5b6040519080825280602002602001820160405280156104525781602001602082028036833780820191505090505b50600190805190602001906104689291906106a4565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048f90610ae6565b60006040518083038185875af1925050503d80600081146104cc576040519150601f19603f3d011682016040523d82523d6000602084013e6104d1565b606091505b5050905080610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050c90610b47565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061059957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105d483610604565b90506000670de0b6b3a764000085836105ed9190610b67565b6105f79190610bf0565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064d57600080fd5b505afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610cae565b5050509150506402540be4008161069c9190610d29565b915050919050565b82805482825590600052602060002090810192821561071d579160200282015b8281111561071c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c4565b5b50905061072a919061072e565b5090565b5b8082111561074757600081600090555060010161072f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077b82610750565b9050919050565b61078b81610770565b811461079657600080fd5b50565b6000813590506107a881610782565b92915050565b6000602082840312156107c4576107c361074b565b5b60006107d284828501610799565b91505092915050565b6000819050919050565b6107ee816107db565b82525050565b600060208201905061080960008301846107e5565b92915050565b6000819050919050565b600061083461082f61082a84610750565b61080f565b610750565b9050919050565b600061084682610819565b9050919050565b60006108588261083b565b9050919050565b6108688161084d565b82525050565b6000602082019050610883600083018461085f565b92915050565b61089281610770565b82525050565b60006020820190506108ad6000830184610889565b92915050565b6108bc816107db565b81146108c757600080fd5b50565b6000813590506108d9816108b3565b92915050565b6000602082840312156108f5576108f461074b565b5b6000610903848285016108ca565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610953601b8361090c565b915061095e8261091d565b602082019050919050565b6000602082019050818103600083015261098281610946565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c3826107db565b91506109ce836107db565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0357610a02610989565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a48826107db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a7b57610a7a610989565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ad0600083610ab5565b9150610adb82610ac0565b600082019050919050565b6000610af182610ac3565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b31600b8361090c565b9150610b3c82610afb565b602082019050919050565b60006020820190508181036000830152610b6081610b24565b9050919050565b6000610b72826107db565b9150610b7d836107db565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bb657610bb5610989565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bfb826107db565b9150610c06836107db565b925082610c1657610c15610bc1565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4081610c21565b8114610c4b57600080fd5b50565b600081519050610c5d81610c37565b92915050565b6000819050919050565b610c7681610c63565b8114610c8157600080fd5b50565b600081519050610c9381610c6d565b92915050565b600081519050610ca8816108b3565b92915050565b600080600080600060a08688031215610cca57610cc961074b565b5b6000610cd888828901610c4e565b9550506020610ce988828901610c84565b9450506040610cfa88828901610c99565b9350506060610d0b88828901610c99565b9250506080610d1c88828901610c4e565b9150509295509295909350565b6000610d3482610c63565b9150610d3f83610c63565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d7e57610d7d610989565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dbb57610dba610989565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610df857610df7610989565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e3557610e34610989565b5b82820290509291505056fea26469706673582212205a5d5115f0755950fb2a8d0e6c2e53cf1937a616650704e4eee4b7771d13c21564736f6c63430008080033";

export class FundMe__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    priceFeedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundMe> {
    return super.deploy(priceFeedAddress, overrides || {}) as Promise<FundMe>;
  }
  getDeployTransaction(
    priceFeedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(priceFeedAddress, overrides || {});
  }
  attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
